#
msgid ""
msgstr ""
"POT-Creation-Date: 2016-10-04T00:11:00.075123\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: \n"
"PO-Revision-Date: \n"
"Last-Translator: Yosuke Matsusaka <yosuke.matsusaka@gmail.com>\n"
"Language-Team: \n"
"Language: en\n"
"X-Generator: Poedit 1.8.8\n"

msgid "このノートについて"
msgstr "About this notebook"

msgid ""
"ロボットアームの順運動学と逆運動学を手を動かしながら学習しましょう。三角関数"
"を使った順運動学の立式からニュートン法を使った関節角推定までを解説します。"
msgstr ""
"Let's learn the forward kinematics and the inverse kinematics of the robot "
"arm by moving our hands. We will explain how to construct forward kinematics "
"using trigonometric functions and how to estimate joint angle using Newton's "
"method."

msgid ""
"Written by Yosuke Matsusaka (MID Academic Promotions, Inc. [@yosuke](https://"
"twitter.com/yosuke))"
msgstr ""
"Written by Yosuke Matsusaka (MID Academic Promotions, Inc. [@yosuke](https://"
"twitter.com/yosuke))"

msgid ""
"このノートはCreative CommonsのBY-SAライセンスで公開します。![CC BY-SA]"
"(http://i.creativecommons.org/l/by-sa/3.0/88x31.png)"
msgstr ""
"This note is published under Creative Commons BY-SA license. ! [CC BY-SA] "
"(http://i.creativecommons.org/l/by-sa/3.0/88x31.png)"

msgid "準備"
msgstr "Preparation"

msgid ""
"このノートはipython notebookを使った手を動かしながら学べる教材になっていま"
"す。Ubuntu上では"
msgstr ""
"This note is a hands-on type teaching material using the ipython notebook. "
"On Ubuntu type following commands:"

msgid "と入力することで環境を立ち上げることができます。"
msgstr "to launch the environment."

msgid ""
"ipython notebookを立ち上げて新規ノートを作成したら、まずグラフ描画と数式処理"
"のライブラリを読み込みます。"
msgstr ""
"Once you have launched the ipython notebook, please create a new notebook, "
"and read the library for graph drawing and symbolic math processing as "
"follows:"

msgid ""
"以下も入力してください。この部分はアニメーションGIFを表示するためのおまじない"
"です。"
msgstr ""
"Please enter the following code as well. This part will give us a magic of "
"displaying animated GIF."

msgid ""
"グラフ領域を初期化します。このグラフ上でロボットアームの動作を確かめていきま"
"す。"
msgstr ""
"Here, we will initialize the graph area. We will confirm the operation of "
"the robot arm on this graph."

msgid "以下は説明のための作図ライブラリです（インストールは任意です）。"
msgstr ""
"The following is plotting library to draw description figures (installation "
"is optional)."

msgid "では、はじめましょう。"
msgstr "Let's get started."

msgid "ロボットアームの順運動学"
msgstr "Forward kinematics of the robot arm"

msgid ""
"「順運動学」とはロボットアームの各関節角が与えられたときに手先の位置を求める"
"作業のことです。"
msgstr ""
"The term \"forward kinematics\" means the task to estimate the position of "
"the robot hand when each joint angle of the robot arm is provided."

msgid ""
"「学」の字が入っているので学問を連想するのですが、そのような大げさなものでは"
"ありません。実際は以下のような作業です。"
msgstr ""
"People tends to think difficultly, because it contains the word \"kinematics"
"\". However, the task is not so complex as described as the follows."

msgid ""
"順運動学を求めるにはロボットアームの構造を知る必要があります。今回シミュレー"
"トするロボットアームは三菱重工製のPA10-7Cです。技術情報が以下のページで公開さ"
"れています。"
msgstr ""
"Calculate the forward kinematics, we need to know the structure of the robot "
"arm. For this specific notebook we will select PA10-7C robot arm made by "
"Mitsubishi Heavy Industries. Technical information of the arm has been "
"published on the following pages."

msgid "https://www.mhi.co.jp/products/detail/pa10_6c_7c.html"
msgstr "https://www.mhi.co.jp/products/detail/pa10_6c_7c.html"

msgid ""
"ロボットアームの各関節の配置と関節間の距離を以下から知ることができます。"
msgstr ""
"The length of the links and joints of the robot arm are described in the "
"following figure."

msgid "https://www.mhi.co.jp/products/detail/images/7c_mass.jpg"
msgstr "https://www.mhi.co.jp/products/detail/images/7c_mass.jpg"

msgid ""
"PA10は本来7自由度（7関節）あるロボットアームですが、ここでは大幅に簡略化して"
"上下方向の2自由度（2関節）のみを考慮します。"
msgstr ""
"PA10 is the robot arm with 7 degree-of-freedom (7 joints). However for this "
"specific notebook, we will take into account only the 2 degree-of-freedom (2 "
"joints) on up and down direction to greatly simplify the model."

msgid ""
"三菱重工の技術情報から、PA10は下図のような根元からたどって第1関節と第2関節の"
"間が450mm、第2関節と手先の間が480mmある構造をしています。この情報を使って第1"
"関節と第2関節の角度が与えられた時の手先の位置を求めてみましょう。"
msgstr ""
"From Mitsubishi Heavy Industry's technical information, length between the "
"first and the second joint from the root of PA10 is 450mm, length between "
"the second joint and the hand is 480mm. By using this information, let's try "
"to estimate the position of the hand given the angle of the first and the "
"second joint."

msgid "はじめに各関節の角度を変数として定義します。"
msgstr "First we define the angle of each joint as a variable."

msgid "各関節間の距離を定数として定義します。"
msgstr "We define the distance between each joint as a constant."

msgid ""
"手先の位置を求める前に、まずは第2関節の位置を求めます。第2関節の位置は三角関"
"数を使って以下のように求まるでしょう。"
msgstr ""
"Before estimating the position of the hand, We first estimate the position "
"of the second joint. Position of the second joint will be calculated in the "
"following manner using the trigonometric functions."

msgid "次に手先の位置を求めます。第2関節の位置に手先までの距離を加算します。"
msgstr ""
"Then we estimate the position of the hand. We add the distance to the hand "
"to the position of the second joint."

msgid ""
"これで手先の位置が求まったはずですが、念の為、グラフで描いて確認します。"
msgstr ""
"Now the hand the position is estimated. We will confirm the result by "
"drawing a graph."

msgid "問題無いようです。順運動学が無事に求まりました。"
msgstr "Seems there is no problem. Forward kinematics is now being solved."

msgid "ロボットアームの逆運動学"
msgstr "Inverse kinematics of the robot arm"

msgid ""
"逆運動学とは順運動学の逆に「手先の位置から各関節の角度を求める」作業です。"
msgstr ""
"The term \"inverse kinematics\" stands for the task to estimate the angle of "
"each joint from the position of the hand. Just as the reverse of the forward "
"kinematics."

msgid ""
"ロボットアームを自由に操ってピックアンドプレースのような動作をさせるには逆運"
"動学を求める必要があります。順運動学より多少難しくなりますが、「学」の字から"
"想像されるほど難しいものではありません。"
msgstr ""
"It is necessary to calculate the inverse kinematics for the operations such "
"as pick-and-place manipulating the robot arm freely. It will be somewhat "
"more difficult than the forward kinematics, but it is yet not so difficult "
"as you imagine from the word \"kinematics\"."

msgid ""
"逆運動学を求めるには、解析的に求める方法と数値的に求める方法の2つがあります。"
msgstr ""
"There are two ways to calculate the inverse kinematics, one is analytical "
"method and the other is numerical method."

msgid "解析的に求める方法"
msgstr "How to calculate inverse kinematics analytically"

msgid ""
"順運動学はすでに求まっているので、その逆を求める、数学的に言うと逆関数を求め"
"る、ということになります。数学的なセンスでこのような逆関数を求めるのが解析的"
"な方法です。"
msgstr ""
"Since the forward kinematics is already given, what we have to do is to seek "
"the opposite. In mathematical word, we have to find an inverse function. "
"Analytical method tries to find such inverse function in a mathematical "
"sense."

msgid "順運動学は最終的に以下の2式になりました。"
msgstr ""
"Forward kinematics is finally expressed as the following two equations."

msgid ""
"解析的な方法では、式をパズルのように組み合わせ、試行錯誤しながら変換していき"
"ます。"
msgstr ""
"In the analytical method, we will transform combine the expression like a "
"puzzle with trial and error."

msgid ""
"三角関数の変換では式を2乗して足し合わせると整理できることがあることが知られて"
"います。"
msgstr ""
"When converting the trigonometric functions, it have been known that it "
"sometimes become better organized by summing the squared equations."

msgid ""
"この式はまだ複雑に見えますが、以下に示す三角関数の各定理を用いると大幅に単純"
"化することができます。"
msgstr ""
"This formula looks still complicated, but it can be greatly simplified by "
"using the each theorem of trigonometric function shown below."

msgid "ピタゴラスの定理: $ cos^2 \\theta + sin^2 \\theta = 1 $"
msgstr "Pythagorean theorem: $ cos^2 \\theta + sin^2 \\theta = 1 $"

msgid ""
"加法定理:  $ cos(\\alpha - \\beta) = cos(\\alpha) cos(\\beta) + sin(\\alpha) "
"sin(\\beta) $"
msgstr ""
"Addition theorem: $ cos(\\alpha - \\beta) = cos(\\alpha) cos(\\beta) + "
"sin(\\alpha) sin(\\beta) $"

msgid ""
"これを踏まえつつ、ここではsympyに自動で整理してもらいます（手抜きです）。"
msgstr ""
"Based on these knowledge, we will use sympy to organize the equation "
"automatically (yes, I am lazy)."

msgid ""
"整理すると$\\theta_1$が消えてしまいます（いつもこのようなことが起きるわけでな"
"くラッキーなパターンです）。"
msgstr ""
"After the simplification, $\\theta_1$ disappears (such thing will not always "
"happen, but we are lucky in this case)."

msgid ""
"これだけ単純な式まで変換できると逆関数の計算は簡単です。$\\theta_2$は$cos$の"
"逆関数$acos$を使って以下のように解けます。解が2つ出てきますが、これについては"
"後で解説します。"
msgstr ""
"Calculation of the inverse function becomes easy after we converted to a "
"simple formula. $\\theta_2$ will be solved by using the $cos$ inverse "
"function $acos$ as the follows. Here we get two solutions, we will discuss "
"about this later."

msgid "> 余談："
msgstr "> FYI note:"

msgid ""
"> sympyのsolveは高機能な求解アルゴリズムを提供してくれます。これを使えば逆運"
"動学を直接解けるのでは？とも思ってしまうのですが、元の整理する前の順運動学の"
"式を与えても自動で解くことはできません。sympyが低機能なわけでなく逆運動学に必"
"要な変換がかなり複雑なのです。このノート末尾の「おまけ」の中で言及している"
"IKFastのような、式を解きやすい形で立式して自動で求解してくれる強力なライブラ"
"リも近年開発されています。"
msgstr ""
"> The sympy \"solve\" function provides us a high-performance solving "
"algorithm. Why don't we solve the inverse kinematics directly by using this "
"function? However, it can not be solved automatically given the forward "
"kinematics equation of the original form. This not is because sympy is low-"
"performance, but the conversion necessary to solve inverse kinematics is "
"fairly complex. At the end of this notebook, we have information on the "
"recently developed powerful libraries such as IKFast which has a function to "
"express the kinematic structure of the robot in easily solvable form and "
"solve inverse kinematics automatically by applying several conversion "
"techniques specialized for kinematics."

msgid ""
"$\\theta_2$が求まったので次に$\\theta_1$を求めましょう。今回は、余弦定理を"
"使って解いてみます。"
msgstr ""
"We got $\\theta_2$ already, so let's calculate $\\theta_1$. Here, we solve "
"by using the law of cosines."

msgid ""
"まずは第1関節から手先まで補助線を引き、補助線と$x$軸の成す角を$\\alpha$としま"
"す。"
msgstr ""
"First, we draw the auxiliary line from the first joint to the hand, and let "
"the angle formed by the auxiliary line and the $x$ axis as $\\alpha$."

msgid "$\\alpha$は$atan$を使って以下のように求まります。"
msgstr "$\\alpha$ can be expressed by using $atan$ as the follows."

msgid "ここでさらに"
msgstr "Further"

msgid ""
"なる角$\\beta$を仮定すると、第2関節を中心とした以下の様な三角形に書き下すこと"
"ができます。"
msgstr ""
"Assuming a corner $\\beta$ described as the above, we can draw following "
"triangle with a focus on the second joint."

msgid ""
"余弦定理（を導出する前の三角形の分解と同様の考え方）から$\\beta$と$"
"\\theta_2$の間には以下の関係が成り立つはずです。"
msgstr ""
"Between $\\beta$ and $\\theta_2$ following relationship should exist from "
"cosine theorem (the same way of thinking when decompose the triangle to "
"derive the theorem)."

msgid ""
"上記の式を$\\beta$の式と組み合わせると$\\theta_1$は以下のようにして計算できま"
"す。"
msgstr ""
"By combining the above equation to the $\\beta$ formula, $\\theta_1$ can be "
"calculated in the following manner."

msgid ""
"これで$\\theta_1$と$\\theta_2$の両者が求まったはずですが、グラフで動きを確認"
"します。試しに三角形の軌跡を描かせてみましょう。"
msgstr ""
"Now both $\\theta_1$ and $\\theta_2$ should be solved. To make sure, we draw "
"the movement in the graph. Let's let the robot to draw the trajectory of the "
"triangle."

msgid ""
"指定した三角形の軌跡を手先で正しく描いてくれてはいるのですが、PA10の実物を想"
"像すると、このままでは肘が地面にぶつかってしまいます。先ほどの計算で$"
"\\theta_2$には2つの解があったと思うのですが、2番目の解を使ってグラフを描いて"
"みましょう。"
msgstr ""
"The trajectory of a triangle is drawn correctly by the robot hand. But if we "
"imagine the real PA10 robot, elbow of the robot will hit the ground. In the "
"above calculation $\\theta_2$ had two solutions. So, let's draw a graph "
"using the second solution."

msgid ""
"これで意図した動作になったのではないかと思います。先ほど2つの解が出てきた意味"
"もこれでわかったと思うのですが、冗長な自由度があるロボットは同じ手先座標にし"
"ようと思っても肘の位置により複数の解が求まり、数学的にはそのどちらも正解で"
"す。とはいえ実際には意図した肘の位置もあるので、どちらか解を選択する必要があ"
"るのです。"
msgstr ""
"Now we get much preferred behavior. We can also understand the meaning of "
"two solutions that came out. Even to realize the same hand coordinate, "
"multiple solutions depending on the position of the elbow is possible due to "
"the redundant degrees of freedom of the robot. Mathematically, both are "
"correct. However in practice, there is a intended position of the elbow so "
"we need to choose either solution."

msgid ""
"> ロボットの「肘の位置」は大きな問題となることがあります。今回は地面が障害に"
"なりましたが、狭い空間にロボットアームを伸ばして作業する場合、手先に気を使う"
"と同時に肘も障害物に当たらないようにしなければなりません。今回は2自由度のロ"
"ボットを考えましたが、同じ上下の軸に3以上のさらに冗長な自由度を持ったロボット"
"を設計することも可能です。このようなロボットは同じ手先座標でも肘の位置をかな"
"り自由に選択することが可能です。計算がめんどうくさくなる、という一方で、狭い"
"空間でも肘の位置をコントロールして障害物を避けながら進むことができるため面白"
"いロボットを作ることができます。"
msgstr ""
"> The \"position of the elbow\" of the robot can become a big problem. This "
"time the ground is the problem, however, if we want to extend the robot arm "
"in a narrow space, we have to take care both the hand and the elbow must not "
"hit the obstacle. In this specific notebook we assumed the two-degree-of-"
"freedom robot, however, it is also possible to design the robot with further "
"redundant degrees of freedom. Such a robot has wide range of freedom the "
"position of the elbow to realize the same hand coordinate. We can make an "
"interesting robot since it is possible to proceed while avoiding obstacles "
"to control the position of the elbow even in a narrow space, while on the "
"other hands calculation of inverse kinematics becomes much challenging."

msgid "> 余談２："
msgstr "> FYI note 2:"

msgid ""
"> とは言っても、冗長な自由度を持ったロボットは計算が大変なだけでなく、長尺の"
"構造材の歪や各モータ部分でガタ（バックラッシュ）が発生し誤差として蓄積するた"
"め、手先座標の精度の確保が難しくなります。実用上は、自由度が高いと同時に精度"
"を出しやすい設計のロボットが多用されます。「スカラ型ロボット」はそのようなロ"
"ボットの一つで、xy軸は今回計算したものと同じ2自由度の構造をしているのですが、"
"手先近くにz軸方向の直動関節があります。機械的な剛性が確保しやすく、計算し易さ"
"と精度の高さを両立できる優れた設計のロボットです。"
msgstr ""
"> However in practice, if we use a robot with high redundant degree of "
"freedom, not only the calculation of inverse kinematics become difficult, "
"but also, securing of hand coordinate accuracy become difficult because the "
"backlash of each motor and distortion of each link will be accumulated. In "
"practice, we try to make high degree of freedom of the robot at the same "
"time from the simple kinematics. \"SCARA robot\" is one of such robot. In "
"SCARA robot, xy-axis has the same structure as the two-degree-of-freedom "
"robot we calculated in this notebook. There is additional z-axis direction "
"linear joint close to the hand. Thanks to this structure, mechanical "
"rigidity is easily secured, and it is an excellent design of the robot that "
"can balance the high precision control and the ease of kinematic calculation."

msgid "数値的に求める方法"
msgstr "Numerical method to solve inverse kinematics"

msgid ""
"「解析的な方法」では数学的に逆関数を求めていきましたが、今回のような大幅に簡"
"略化したロボットであってもかなり骨が折れる作業だったと思います。より多くの関"
"節を持った複雑なロボットの関節角を計算する場合は更に大変な作業になります。"
msgstr ""
"We have already studied how to calculate inverse kinematics using "
"\"analytical method\" which takes the mathematical approach to calculate "
"inverse function. But I think it was pretty tiring work even for the greatly "
"simplified robot like we assumed here. If we want to calculate the joint "
"angles of the complex robot with complex kinematics will be even more "
"difficult task."

msgid ""
"解析的な方法では関節角を逆関数として求めようとしましたが、逆関数を用いず、コ"
"ンピュータを使った繰り返し計算によって関節角を求めることもできます。そのよう"
"な方法を「数値的な方法」と呼びます。ここではニュートン法を使った例を紹介しま"
"す。"
msgstr ""
"In the analytical method, we tried to calculate joint angles using an "
"inverse function. However, without using the inverse function, we can "
"calculate the joint angles by iterative calculations using computer. Such "
"method is called \"numerical method\". Here, we will explain the example of "
"using Newton's method."

msgid "ニュートン法では以下の考え方で解に近づいていきます。"
msgstr ""
"In Newton's method, we will approach to the solution by the following way."

msgid ""
"まずは、関節角に適当な初期値を与えます。「適当」は案外難しいのですが、ここで"
"はサイコロを振って決めたランダムな値と考え"
msgstr ""
"First of all, we give the appropriate initial value to the joint angles. "
"\"Appropriate value\" is difficult than we think, but lets say we set a "
"random value that was determined by shaking a dice."

msgid "てください。"
msgstr "."

msgid "$$ \\theta_1 = 初期値 $$"
msgstr "$$ \\theta_1 = initial value $$"

msgid "関節の初期値から順運動学の式を使って手先座標を求めます。"
msgstr ""
"From the initial value of the joint angles, we calculate the hand coordinate "
"by using the formula in forward kinematics."

msgid "$$ r_1 = f(\\theta_1) $$"
msgstr "$$ r_1 = f(\\theta_1) $$"

msgid ""
"ランダムに決めた初期値がたまたま正解だった場合を除いて、この手先座標は目標座"
"標とは異なっているはずです。"
msgstr ""
"Except for the case where the initial value that we selected randomly was "
"actually the correct answer, this hand coordinate should be different from "
"the target coordinate."

msgid ""
"目標座標と現在の手先座標との差分を計算します。この差分値は、手先座標のxy軸の"
"空間の中で現在の座標と目標座標がどちらの方向にどれだけ離れているかという指標"
"になります。"
msgstr ""
"We calculate the difference between the target coordinate and the current "
"hand coordinate. This value will measure how the current coordinate and the "
"target coordinate is distant in either direction in the xy-axis of the hand "
"coordinate system."

msgid "$$ r - r_1 $$"
msgstr "$$ r - r_1 $$"

msgid ""
"手先座標のxy空間での指標が得られたとは言っても、今回は関節角の調整でその指標"
"に近づいていかなければなりません。ニュートン法ではここで関数の微分を使いま"
"す。順運動学の微分の式に対して現在の関節角の値を代入すると「関節角をどれだけ"
"動かすと手先座標のxy軸の空間で手先がどれだけ動くか」という傾きが定数として得"
"られます。"
msgstr ""
"Although, we obtained the measure in the hand coordinate system, we have to "
"the decrease the measure by adjusting joint angles of the robot. To do that, "
"in the Newton's method we use a derivative of the function. By substituting "
"the value of the current joint angle to the differentiation of the forward "
"kinematics function, we will get constant which is proportion to \"how much "
"the xy-axis values in hand coordinate system will be changed by changing "
"joint angle values\"."

msgid "$$ A_1 = f'(\\theta_1) $$"
msgstr "$$ A_1 = f '(\\theta_1) $$"

msgid ""
"元の順運動学の式が三角関数なので本来この傾きは関節角に応じて複雑な動きをする"
"はずです。なので、ここで得られた定数は「現在の関節角の付近ではこの傾き」とい"
"う暫定的な値を切り出したものでしかありません。ですが近似としては十分使えま"
"す。"
msgstr ""
"Because the original forward kinematics formula contains trigonometric "
"functions, this constant should make complex change depending on the joint "
"angle. So the resulting constant only effective \"in the vicinity of the "
"current joint angle\". But it is enough to make an approximation."

msgid "上記の傾きを手先座標のxy空間と関節角をつなぐ「のり」のように使います。"
msgstr ""
"We use the above constant as the \"glue\" to connect the joint angle to the "
"hand xy-axis coordinate system."

msgid ""
"式の左辺を手先座標のxy空間、右辺を関節角の空間と考えて、のりでつなぎ合わせま"
"す。ここで$r$と$\\theta$はそれぞれ手先座標と関節の目標値です。"
msgstr ""
"We place xy-axis hand coordinate system to the left side of the equation, "
"the right side is the joint angle coordinate system and put them together "
"with the glue. Here $r$ and $\\theta$ is the respective target value of the "
"hand coordinate and the joint angles."

msgid "$$ r - r_1 = A_1 (\\theta - \\theta_1) $$"
msgstr "$$ r - r_1 = A_1 (\\theta - \\theta_1) $$"

msgid ""
"厳密にはこのような等式は成立するわけではなく、今この瞬間に限っては近似的にこ"
"のような関係が成り立つと考えよう、と信じるわけです。"
msgstr ""
"Strictly speaking, this does not means this equality is established. But we "
"try to think at this specific moment, the approximately holds such "
"relationship."

msgid "上記の式を$\\theta$に関して解くと以下のようになります。"
msgstr "Now we solve the above equation with respect to $\\theta$."

msgid "$$ \\theta = \\theta_1 + A_1^{-1} (r - r_1) $$"
msgstr "$$ \\theta = \\theta_1 + A_1^{-1} (r - r_1) $$"

msgid ""
"$r_1$と$A_1$は順運動学から求めたので置き換えると、目標座標$r$と関節角の初期値"
"$\\theta_1$から正しい関節角$\\theta$を求める以下の式になります。"
msgstr ""
"By replacing $r_1$ and $A_1$ to the actual values we calculated from the "
"forward kinematics, we will get the following equation which determining the "
"correct joint angle $\\theta$ from the target hand coordinate $r$ and the "
"initial value $\\theta_1$."

msgid "$$ \\theta = \\theta_1 + f'(\\theta_1)^{-1} (r - f(\\theta_1)) $$"
msgstr "$$ \\theta = \\theta_1 + f'(\\theta_1)^{-1} (r - f(\\theta_1)) $$"

msgid ""
"$f'(\\theta_1)$の値に関してはあくまで$\\theta_1$付近での近似にすぎないので、"
"実際は以下のようにして何度も繰り返し計算して精度を高めます。"
msgstr ""
"Since $f '(\\theta_1)$ is only an approximation near $\\theta_1$, we improve "
"the accuracy by calculating repeatedly as follows."

msgid ""
"$$ \\theta_{i+1} = \\theta_i + k f'(\\theta_i)^{-1} (r - f(\\theta_i)) $$"
msgstr ""
"$$ \\theta_{i+1} = \\theta_i + k f'(\\theta_i)^{-1} (r - f(\\theta_i)) $$"

msgid ""
"ここで$k$は$A=f'(\\theta)$が近似としてあまり信用できない場合に使う手加減の係"
"数です（今回もその信用できない場合にあたります）。この係数を小さめにすること"
"で、小刻みに解に近づこうとするため計算量は増えますが収束がより確実になりま"
"す。"
msgstr ""
"Here, $k$ is the coefficient used when $A=f '(\\theta)$ is not so creditable "
"as an approximation (including our case). If this coefficient is set to "
"small value, the approach to the solution will be little-by-little and "
"required numbers of calculation will be increased, but can realize more "
"reliable convergence."

msgid ""
"ニュートン法では、関数の微分のみを使って解を求められるのがポイントです。複雑"
"な変換が必要な逆関数とは異なり微分は簡単に導出することができます。"
msgstr ""
"Please note that in Newton's method, we can calculate the solution by using "
"only the derivative of the function. Unlike the complex conversions required "
"in analytical method to get inverse function, derivative of the function can "
"be easily calculated."

msgid "適当な初期値から$A$と$A^{-1}$を求めてみましょう。"
msgstr "Lets calculate $A$ and $A^{-1}$ from a suitable initial value."

msgid ""
"$A^{-1}$は$A$の逆関数ですが、$A$は定数なので簡単に求まります。$A$が1次元であ"
"れば"
msgstr ""
"$A^{-1}$ is the inverse function of $A$, but it can be calculated easily "
"because it is a constant. If $A$ is one-dimension"

msgid "$$A^{-1} = \\frac{1}{A}$$"
msgstr "$$A^{-1} = \\frac{1}{A}$$"

msgid ""
"ですが、ここでは式の入出力がそれぞれ$r = (x, y)$、$\\theta = (\\theta_1, "
"\\theta_2)$の2次元であるため、$A$も2行2列の行列になります。2行2列の行列の逆関"
"数（逆行列）は以下のように計算できます。"
msgstr ""
"But, here in our case the input and output of the system is 2-dimension "
"because the expression is $r = (x, y)$ and $\\theta = (\\theta_1, "
"\\theta_2)$. Such case, $A$ will be a matrix. Inverse function (inverse "
"matrix) of 2-dimension matrix can be calculated as follows."

msgid ""
"$$A^{-1} = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}^{-1} = \\frac{1}"
"{ad-bc}\\begin{pmatrix} d & -b \\\\ -c & a \\end{pmatrix}$$"
msgstr ""
"$$A^{-1} = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}^{-1} = \\frac{1}"
"{ad-bc}\\begin{pmatrix} d & -b \\\\ -c & a \\end{pmatrix}$$"

msgid ""
"一見複雑な式に見えますが、各行列要素の掛け算と割り算だけなので一瞬で計算でき"
"ます。"
msgstr ""
"This apparently looks like a complex formula, but we can calculate them "
"instantly because it is simply a multiplication and division of each matrix "
"element."

msgid ""
"ここでは逆行列の計算に通常のinv()ではなく疑似逆行列を計算するpinv()を用いてい"
"ます。今回は深く説明しませんが、擬似逆行列を使うことでロボットの手が伸びきっ"
"た状態などでの計算の安定性が向上します。"
msgstr ""
"In this specific notebook we use function pinv() to calculate pseudo-inverse "
"matrix instead of function inv() to calculate normal inverse matrix. To "
"explain in brief, the stability of the calculation can be improved by using "
"pseudo-inverse matrix in such a state in which the hand of the robot is "
"fully extended."

msgid "繰り返し計算で解を求めるプログラムを書いてみましょう。"
msgstr "Let's write a program to find a solution by calculating literately."

msgid "グラフを描いて確認しましょう。"
msgstr "Let's confirm the result by drawing a graph."

msgid "解を正しく推定できているようです。"
msgstr "It seems it is correctly estimating the solution."

msgid ""
"数値的な方法を使うことで逆関数を導出することなく逆運動学を計算することができ"
"ました。"
msgstr ""
"We have calculated the inverse kinematics by using a numerical method "
"without having to derive the inverse function."

msgid ""
"ここで利用したニュートン法は、逆関数を導出することが難しい複雑な関数であって"
"も近似的にパラメータを推定することができる非常に強力なアルゴリズムで、ロボッ"
"トの制御にとどまらず様々な最適化計算に用いられています。"
msgstr ""
"Newton's method is a very powerful algorithm that can approximate optimal "
"parameters even for the very complex function which is difficult to derive "
"an inverse function. Not only limited to robotic application, it is applied "
"to wide variety of optimization problems."

msgid ""
"その一方で収束性が保証されていなかったり、初期値をうまく取らないと解が発散す"
"るという使用上の注意点もありますので、それらの特性を理解した上でうまく利用す"
"る必要があります。"
msgstr ""
"On the other hand, we have to note that the convergence is not guaranteed in "
"such method, but actually depend on how appropriate we can select the "
"initial value. You need to take advantage of the method at the same time "
"understanding their characters."

msgid ""
"数値的な方法は利用上の注意点がいくつかあるとはいえ、解析解を得ることが難しい"
"複雑な構造のロボットであっても多少の繰り返し計算のみで容易に逆運動学を導出で"
"きます。近年のコンピュータの高速化は著しく、小型の組込みプロセッサでも逆運動"
"学の計算が実用的な速度で動いてしまうため、数値的な方法は高度なロボットシステ"
"ムで多く用いられています。"
msgstr ""
"Although there are few characters to be cared when using the numerical "
"method, we can easily calculate the inverse kinematics even for the robot "
"with complex structure it only from some repetitive calculations. In recent "
"years, performance the computer has significantly increased. Even the small "
"embedded processor is capable to calculate the inverse kinematics at "
"practical speed. From this background, numerical method has been widely used "
"in many advanced robotic systems."

msgid "ロボットへの実装"
msgstr "Implementation to the robot"

msgid ""
"Pythonによるプログラミングかと思いきや実際は数式の変換の連続で嫌になってきた"
"ころだと思いますが、それもここまでです。"
msgstr ""
"You might have expected the content of this notebook is programming with "
"Python,  but probably have noticed it was actually a continuing "
"transformation of the equations. But it is now over!"

msgid ""
"いよいよ上記の逆運動学をC++でプログラミングしてロボットを動かしてみます。"
msgstr ""
"Finally we will program the above inverse kinematics in C ++ and control the "
"robot."

msgid ""
"[前回の記事](http://tech.mid-japan.com/blog/2014/07/10/learn-pid-control-and-"
"rtm/)でPA10ロボット用のPID制御コントローラを実装して調整しました。また、RTMを"
"使うとシステムを「コンポーネント」という部品に分割して開発できることを知りま"
"した。今回は前回開発したPID制御コントローラを組み替えることで以下の設計のシス"
"テムを組んでみます。"
msgstr ""
"In the [previous article (in Japanese)](http://tech.mid-japan.com/"
"blog/2014/07/10/learn-pid-control-and-rtm/) we have already implemented a "
"PID controller to PA10 robot and did the adjustment. In addition, we know "
"that by using the middle-ware framework such as RTM, we can developed the "
"system divided into parts which is called \"component\". This time we will "
"try to compose a system of the following design by rearranging the PID "
"controller was developed previously."

msgid "今回のメインは図の真ん中にある「逆運動学コンポーネント」です。"
msgstr ""
"The main part of today is the \"inverse kinematics component\" located at "
"the center of the figure."

msgid ""
"ここまでの作業で解析的な方法と数値的な方法の両方で逆運動学を導出しましたが、"
"大変だったのは解析的な方法の方だったと思います。せっかく頑張って数式を変換し"
"たのでここでは解析的な方法で実装してみましょう。"
msgstr ""
"We have already calculated the inverse kinematics in both the analytical "
"methods and numerical methods. Here, to thank to our valuable work on "
"converting equations, let's implement our component using the analytical "
"method."

msgid "解析的な方法では最終的に以下の式が得られました："
msgstr ""
"We get the following formula as the final outcome obtained from the "
"analytical method:"

msgid "この式をC++で実装すると以下のようになります。"
msgstr "Implementation of this formula in C++ is as follows."

msgid "ソースコード全体を以下のレポジトリで公開しています。"
msgstr "The entire source code is available at the following repository."

msgid "https://github.com/devrt/inverse-kinematics-primer"
msgstr "https://github.com/devrt/inverse-kinematics-primer"

msgid ""
"InverseKinematics.cpp, HandMotionGeneration.cpp, PIDController.cppが各コン"
"ポーネントのソースコードになっているので、まずは読んでみてください。"
msgstr ""
"Please first read file InverseKinematics.cpp, HandMotionGeneration.cpp, "
"PIDController.cpp which is the source code of each component."

msgid ""
"シミュレーションを起動するにはhrpsys-baseインストール済みのLinux環境が必要で"
"す。"
msgstr ""
"To start the simulation, it require hrpsys-base installed on Linux "
"environment."

msgid ""
"[数回前の記事](tech.mid-japan.com/blog/2014/06/28/vagrant-hrpsys-watchdog/)で"
"紹介したVagrantを使うと環境を気軽に立ち上げることができるので、特にWindowsを"
"使っている方にはお勧めです。"
msgstr ""
"It is possible to launch the environment using the Vagrant environment, we "
"have introduced [several times before] (tech.mid-japan.com/blog/2014/06/28/"
"vagrant-hrpsys-watchdog/). It is recommended particular for those who are "
"using Windows."

msgid ""
"環境を立ち上げ、ログインしたらレポジトリをチェックアウトしてスクリプトを起動"
"します。"
msgstr ""
"Once startup the environment and logged in, please checkout the repository "
"and then start the script."

msgid ""
"ディフォルトの状態では手先に三角の軌跡を描かせるプログラムが入っています。"
msgstr ""
"Program to draw a triangular trajectory by the hand has been implemented as "
"a default."

msgid "問題なく動作しているようです。"
msgstr "It seems it has worked without problems."

msgid "HandMotionGeneration.cppを編集して箱に手を伸ばしてみます。"
msgstr "Let's reach to the box by editing the HandMotionGeneration.cpp."

msgid ""
"指を開け閉めできないのが無念、、、（頑張れば箱を取ることもできるので、この先"
"は各自ソースコードをいじってみてください）。"
msgstr ""
"We have successfully touched the box ! (It is also possible to pick a box, "
"by using fingers. Please go ahead and try to modify the source code.)"

msgid "おまけ"
msgstr "Appendix"

msgid ""
"今回は手を動かしながら一から式を導出＆実装していきましたが、逆運動学はロボッ"
"トの制御で多用されるため様々なライブラリが開発されています。"
msgstr ""
"In this specific notebook we have calculated and implemented the inverse "
"kinematics formula from scratch. However, various libraries to solve the "
"inverse kinematics already exist, because they are frequently used to "
"control the robot."

msgid ""
"現在、ロボット界で最も人気があるのはRosen Diankovによって開発されているIKFast"
"です。"
msgstr ""
"Currently, the most popular library used in the robotics society is IKFast "
"developed by Rosen Diankov."

msgid "http://openrave.org/docs/latest_stable/openravepy/ikfast/"
msgstr "http://openrave.org/docs/latest_stable/openravepy/ikfast/"

msgid ""
"IKFastはロボットの構造を与えると自動で解析解を導出（内部でsympyを利用）して、"
"解けた式を自動でC++のコードに変換して出力してくれます。"
msgstr ""
"IKFast can automatically the analytical solution given the structure of the "
"robot (it internally uses sympy). It will also convert and output the solved "
"equation to C++ code."

msgid ""
"解析解を使っているため、逆運動学の結果は安定しており計算も非常に高速です。"
msgstr ""
"Because it is using analytical solution, the results of inverse kinematics "
"is stable and work very fast."

msgid "ROSからIKFastを利用するには以下のパッケージを使います。"
msgstr ""
"To take advantage of the IKFast from ROS, you can use the following package."

msgid "http://moveit.ros.org/wiki/Kinematics/IKFast"
msgstr "http://moveit.ros.org/wiki/Kinematics/IKFast"

msgid ""
"RTMからOpenRAVE（IKFastの親プロジェクト）を利用することができるパッケージが、"
"岡田先生（玉川大学）により開発＆公開されています。"
msgstr ""
"Package utilize OpenRAVE (parent project of IKFast) from the RTM have been "
"developed and published by Okada's lab (Tamagawa University)."

msgid "https://code.google.com/p/rtc-openrave/"
msgstr "https://code.google.com/p/rtc-openrave/"

msgid "OpenHRPにも逆運動学を計算するライブラリがあります。"
msgstr ""
"There is also a library to calculate the inverse kinematics in OpenHRP."

msgid ""
"こちらは数値的な方法で計算するものなので安定性については注意が必要ですが、シ"
"ミュレーションに使うのと同じVRML形式のモデルファイルから逆運動学を計算できる"
"ので非常に便利です。"
msgstr ""
"We have to be careful about the stability, because the inverse kinematics is "
"calculated by numerical method, but it is very convenient because it can "
"calculate the inverse kinematics from the same VRML model as used in the "
"simulation."

msgid ""
"http://www.openrtp.jp/openhrp3/jp/reference/idl/html/"
"interfaceOpenHRP_1_1DynamicsSimulator.html"
msgstr ""
"http://www.openrtp.jp/openhrp3/jp/reference/idl/html/"
"interfaceOpenHRP_1_1DynamicsSimulator.html"

msgid ""
"これを使うと以下のビデオのようなデモを作ることができます（デモに使ったソース"
"コードは以下を参照）。"
msgstr ""
"By using this library, you can create a demo application, such as the "
"following video (see the source code used in this demo from the following "
"link)."

msgid ""
"https://github.com/yosuke/OpenHRIWorlds/blob/master/openhriworlds/"
"BlocksWorld.py"
msgstr ""
"https://github.com/yosuke/OpenHRIWorlds/blob/master/openhriworlds/"
"BlocksWorld.py"
